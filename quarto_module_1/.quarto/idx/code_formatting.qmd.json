{"title":"Course style guide","markdown":{"headingText":"Course style guide","containsRefs":false,"markdown":"\n```{r setup, include=FALSE}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE,\n                      eval = FALSE)\n```\n\n![](hex_complex.png){.intro_image}\n\nThis document represents a style guide for the script files in our course and is intended to help you develop a consistent syntax for creating communicable, readable code. Well-formatted code is not just an end product though -- recommendations in this document will help you explore and debug your code *as you write it*. Moreover, a portion of your grade will be based on adhering to this style guide (up to 10% per problem set)!\n\nHerein, I borrow heavily from the [tidyverse style guide](https://style.tidyverse.org/){target=\"_blank\"}, from which most of the formatting rules below were derived. I include only elements from the tidyverse style guide that are relevant to the content in this course and have included additional or modified elements that, in my opinion, provide added utility or enhanced code readability. Recommendations that vary between this document and the tidyverse style guide are annotated with a superscript &dagger; symbol and are described, on a case-by-case basis, in section 8.2, *Style guide explained*.\n\n*Note: Style guides, such as this one, are common across many computer languages and organizations. Although \"style\" represents a preference (i.e., it does not influence code output), using a style guide does make collaboration easier!*\n\nThis lesson is divided into three sections:\n\n<ul>\n<li>**8.1 Style guide, in brief**: This section provides the code formatting rules that we will follow in this course. I suggest returning to this *often* and comparing your problem set answers with this guide prior to submission.</li>\n<li>**8.2 Style guide, in-depth**: Here I provide a description of the code formatting rules, why they are helpful, and examples of each.</li>\n<li>**8.3 Exploring these rules**: We will end with an R script and video where we reformat poorly formatted code together.</li>\n</ul>\n\n## Style guide, in brief\n\n### Operators\n\n* **Assignment** (`<-`, `=`):\n  * Always use the `<-` operator for global assignment.\n  * Separate assignment operators from surrounding code with *one* leading *and* trailing space. *Exception*: You can add more than one space before the `=` operator if it improves code block alignment.\n  * Place no more than *one* assignment operator (`=` or `<-`) per line of code^&dagger;^.\n  * Assigned names should  be written in snake_case.\n* **Pipe operators** (`|>`):\n  * Include *one* leading space before pipe operators.\n  * Code that follows a pipe operator should be placed on a new line^&dagger;^.\n  * Piped code should be indented *two* spaces (one tab stop) relative to the first step of the chain.\n* **Arithmetic** (e.g., `+`, `*`, `/`) and **logical operators** (e.g., `==`, `!=`, `%in%`) should be separated from the adjacent code with *one* leading and trailing space. *Exception*: Negation (`!`) operators should *not* be separated from adjacent code.\n* **Parentheses** (`(...)`)^&dagger;^, **extraction** (`[]`, `[[]]`, `$`), and **colon operators** (`:`, `::`) should *not* be preceded or followed by a space.\n* **Formula operators** (`~`):\n  * Include *one* leading *and* trailing space for two-sided formulas.\n  * Do *not* include a trailing space if `~` is used in a single-sided formula with a single identifier.\n  * *Do* include a trailing space if `~` is followed by function (including operators).\n  \n### Code blocks and comments:\n\n* Maintain *one* blank line between code blocks^&dagger;^. *Exception*: Do not separate adjacent `library()` functions with a blank line.\n* Maintain *one* blank line between code blocks and comments^&dagger;^.\n* **Hashtags** (`#`) should be separated from comment text by *one* trailing space.\n* Code should *not* exceed 80 characters in width (if it is avoidable). \n* Include no more than *one* named function per line of code (i.e., operators are okay)^&dagger;^. *Exception*: Nested functions where the inner function is the combine function (`c()`) or functions used to calculate summary statistics of a data object (e.g., `mean()`, `n()`, and `length()`).\n* **Nested functions** should not be nested deeper than two levels (use a pipe instead!)^&dagger;^ and each level should be indented *two* spaces (one tab stop) relative to the parent function.\n\n### Arguments in a function\n\n* If you provide three or more arguments to a named function, place each argument on its own line^&dagger;^. *Exception*: When using the `c()` or `list()` functions, you may include up to five numeric values.\n* **Logicals**: Spell out `TRUE` and `FALSE` in a function's argument.\n* If you modify the default behavior of a function's argument, include the name of the argument.\n* **Character values**: Use double-quotes (`\"example\"`) when creating character vectors.\n* **Commas** should be followed by *one* trailing space, but *not* a leading space. *Exception*: More than one space *can* be added after a comma if it improves the alignment within a code block.\n\n## Style guide, in-depth\n\n### Operators\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} **Assignment** (`<-`, `=`):\n:::\n\n:::{class=indent_wb}\n[&cir;]{class=bulls} Always use the `<-` operator for global assignment.\n:::\n\n:::{class=indent_code_wb}\n[Bad:]{class=bad}\n\n```{r}\nmy_vector = c(1, 2)\n```\n\n[Good:]{class=good}\n\n```{r}\nmy_vector <- c(1, 2)\n```\n:::\n\n:::{class=indent_wb}\n[&cir;]{class=bulls} Separate assignment operators from surrounding code with *one* leading *and* trailing space.\n:::\n\n:::{class=indent_code_wb}\n[Bad:]{class=bad}\n\n```{r}\nsayings<-\n  tibble(\n    country=c(\"boy\", \"howdy\"),\n    nerdy =c(\"hello\", \"world\"),\n    formal= c(\"warm\", \"wishes\"))\n```\n\n[Good:]{class=good}\n\n```{r}\nsayings <-\n  tibble(\n    country = c(\"boy\", \"howdy\"),\n    nerdy = c(\"hello\", \"world\"),\n    formal = c(\"warm\", \"wishes\"))\n```\n\n**Exception**: You can add more than one space before the `=` operator if it improves code block alignment.\n\n```{r}\nsayings <-\n  tibble(\n    country = c(\"boy\", \"howdy\"),\n    nerdy   = c(\"hello\", \"world\"),\n    formal  = c(\"warm\", \"wishes\"))\n```\n\n:::\n\n:::{class=indent_wb}\n[&cir;]{class=bulls} Place no more than *one* assignment operator (`=` or `<-`) per line of code^&dagger;^.\n:::\n\n:::{class=indent_code_wb}\n[Bad:]{class=bad}\n\n```{r}\ngreetings <- rep(c(\"hello world\"), times = 2)\n```\n\n[Good:]{class=good}\n\n```{r}\ngreetings <- \n  rep(c(\"hello world\"), times = 2)\n```\n:::\n\n:::{class=indent_wb}\n[&cir;]{class=bulls} Assigned names should be written in snake_case.\n:::\n\n:::{class=indent_code_wb}\n[Bad:]{class=bad}\n\n```{r}\nmy.phrases <-\n  tribble(\n    ~boyHowdy, ~HelloWorld,\n    1, 2)\n```\n\n[Good:]{class=good}\n\n```{r}\nmy_phrases <-\n  tribble(\n    ~boy_howdy, ~hello_world,\n    1, 2)\n```\n:::\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls}  **Pipe operators** (`|>`):\n:::\n\n:::{class=indent_wb}\n[&cir;]{class=bulls} Include *one* leading space before pipe operators.\n:::\n\n:::{class=indent_code_wb}\n[Bad:]{class=bad}\n\n```{r}\nc(1, 2)|>\n  mean()\n```\n\n[Good:]{class=good}\n\n```{r}\nc(1, 2) |>\n  mean()\n```\n:::\n\n:::{class=indent_wb}\n[&cir;]{class=bulls} Code that follows a pipe operator should be placed on a new line^&dagger;^.\n:::\n\n:::{class=indent_code_wb}\n[Bad:]{class=bad}\n\n```{r}\nc(1, 2) |> mean()\n```\n\n[Good:]{class=good}\n\n```{r}\nc(1, 2) |>\n  mean()\n```\n:::\n\n:::{class=indent_wb}\n[&cir;]{class=bulls} Piped code and comments should be indented *two* spaces (one tab stop) relative to the first step of the chained process.\n:::\n  \n:::{class=indent_code_wb}\n[Bad:]{class=bad}\n\n```{r}\nc(1, 2) |>\nmean()\n\nc(1, 2) |>\n  \n# Calculate mean:\n  \n  mean()\n```\n\n[Good:]{class=good}\n\n```{r}\nc(1, 2) |>\n  mean()\n\nc(1, 2) |>\n  \n  # Calculate mean:\n  \n  mean()\n```\n:::\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} **Arithmetic** (e.g., `+`, `*`, `/`) and **logical operators** (e.g., `==`, `!=`, `%in%`) should be separated from the adjacent code with *one* leading and trailing space.\n:::\n\n:::{class=indent_code_bb}\n[Bad:]{class=bad}\n\n```{r}\n1/2\n1+ 2\n1 ==2\n```\n\n[Good:]{class=good}\n\n```{r}\n1 / 2\n1 + 2\n1 == 2\n```\n\n**Exception**: Negation (`!`) operators should *not* be separated from adjacent code.\n\n```{r}\n!1 == 2\n```\n:::\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} **Parentheses** (`(...)`)^&dagger;^, **extraction** (`[]`, `[[]]`, `$`), and **colon operators** (`:`, `::`) should *not* be preceded or followed by a space.\n:::\n\n:::{class=indent_code_bb}\n[Bad:]{class=bad}\n\n```{r}\nc (1, 2)\n\nsayings[1, 2 ]\n\nsayings$ nerdy\n```\n\n[Good:]{class=good}\n\n```{r}\nc(1, 2)\n\nsayings[1, 2]\n\nsayings$nerdy\n```\n\n:::\n\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} **Formula operators** (`~`):\n:::\n\n:::{class=indent_wb}\n[&cir;]{class=bulls} Include *one* leading *and* trailing space for two-sided formulas.\n:::\n\n:::{class=indent_code_wb}\n[Bad:]{class=bad}\n\n```{r}\n\n```\n\n[Good:]{class=good}\n\n```{r}\n\n```\n:::\n\n:::{class=indent_wb}\n[&cir;]{class=bulls} Do *not* include a trailing space if `~` is used in a single-sided formula with a single identifier.\n:::\n\n:::{class=indent_code_wb}\n[Bad:]{class=bad}\n\n```{r}\n\n```\n\n[Good:]{class=good}\n\n```{r}\n\n```\n:::\n\n:::{class=indent_wb}\n[&cir;]{class=bulls} *Do* include a trailing space if `~` is followed by function (including operators).\n:::\n\n:::{class=indent_code_wb}\n[Bad:]{class=bad}\n\n```{r}\n\n```\n\n[Good:]{class=good}\n\n```{r}\n\n```\n:::\n  \n### Code blocks and comments:\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} Maintain *one* blank line between code blocks^&dagger;^. \n:::\n\n:::{class=indent_code_bb}\n[Bad:]{class=bad}\n\n```{r}\nc(1, 2)\nlist(1, 2)\n```\n\n[Good:]{class=good}\n\n```{r}\nc(1, 2)\n\nlist(1, 2)\n```\n\n**Exception**: Do not separate adjacent `library()` functions with a blank line.\n\n```{r}\nlibrary(lobstr)\nlibrary(tidyverse)\n```\n:::\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} Maintain *one* blank line between code blocks and comments^&dagger;^.\n:::\n\n:::{class=indent_code_bb}\n[Bad:]{class=bad}\n\n```{r}\n# A poorly placed section header -----------------------------\n# My atomic vector:\nc(1, 2)\n# My list:\n\nlist(1, 2)\n```\n\n[Good:]{class=good}\n\n```{r}\n# A well-placed section header --------------------------------\n\n# My atomic vector:\n\nc(1, 2)\n\n# My list:\n\nlist(1, 2)\n```\n:::\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} **Hashtags** (`#`) should be separated from comment text by *one* trailing space.\n:::\n\n:::{class=indent_code_bb}\n[Bad:]{class=bad}\n\n```{r}\n#A well-placed section header ---------------------------------\n\n#My atomic vector:\n```\n\n[Good:]{class=good}\n\n```{r}\n# A well-placed section header --------------------------------\n\n# My atomic vector:\n```\n:::\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} Code should *not* exceed 80 characters in width (if it is avoidable). \n:::\n\n:::{class=indent_code_bb}\n[Bad:]{class=bad}\n\n```{r}\nbrood_x_cicadas <- c(\"Magicicada cassini\", \"Magicicada septendecim\", \"Magicicada septendecula\")\n```\n\n[Good:]{class=good}\n\n```{r}\nbrood_x_cicadas <- \n  c(\"Magicicada cassini\", \"Magicicada septendecim\", \"Magicicada septendecula\")\n\n# Or (even better):\n\nbrood_x_cicadas <- \n  c(\"Magicicada cassini\",\n    \"Magicicada septendecim\", \n    \"Magicicada septendecula\")\n```\n:::\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} Include no more than *one* named function per line of code (i.e., operators are okay)^&dagger;^.\n:::\n\n:::{class=indent_code_bb}\n[Bad:]{class=bad}\n\n```{r}\n\n```\n\n[Good:]{class=good}\n\n```{r}\n\n```\n\n**Exception**: Nested primitive functions (e.g., `c()`, `list()`, and `rep()`) and those used to calculate summary statistics of a data object (e.g., `mean()`, `n()`, and `length()`).\n\n```{r}\n\n```\n:::\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} **Nested functions** should not be nested deeper than two levels (use a pipe instead!)^&dagger;^ and each level should be indented *two* spaces (one tab stop) relative to the parent function.\n:::\n\n:::{class=indent_code_bb}\n[Bad:]{class=bad}\n\n```{r}\n\n```\n\n[Good:]{class=good}\n\n```{r}\n\n```\n:::\n\n### Arguments in a function\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} If you provide four or more arguments to a named function, place each argument on its own line^&dagger;^.\n:::\n\n:::{class=indent_code_bb}\n[Bad:]{class=bad}\n\n```{r}\n\n```\n\n[Good:]{class=good}\n\n```{r}\n\n```\n\n**Exception**: When using the `c()` or `list()` functions, you may include up to five numeric values.\n\n```{r}\n\n```\n:::\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} **Logicals**: Spell out `TRUE` and `FALSE` in a function's argument.\n:::\n\n:::{class=indent_code_bb}\n[Bad:]{class=bad}\n\n```{r}\n\n```\n\n[Good:]{class=good}\n\n```{r}\n\n```\n:::\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} If you modify the default behavior of a function's argument, include the name of the argument.\n:::\n\n:::{class=indent_code_bb}\n[Bad:]{class=bad}\n\n```{r}\n\n```\n\n[Good:]{class=good}\n\n```{r}\n\n```\n:::\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} **Character values**: Use double-quotes (`\"example\"`) when creating character vectors.\n:::\n\n:::{class=indent_code_bb}\n[Bad:]{class=bad}\n\n```{r}\n\n```\n\n[Good:]{class=good}\n\n```{r}\n\n```\n:::\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} **Commas** should be followed by *one* trailing space, but *not* a leading space.\n:::\n\n:::{class=indent_code_bb}\n[Bad:]{class=bad}\n\n```{r}\n\n```\n\n[Good:]{class=good}\n\n```{r}\n\n```\n\n**Exception**: More than one space *can* be added after a comma if it improves the alignment within a code block.\n\n```{r}\n\n```\n:::\n\n### Whitespace\n\n:::{class=indent_code_wb}\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\nc(1, 2)\nlist(1, 2)\n```\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\nc(1, 2)\n\nlist(1, 2)\n```\n\n**Exception**: The `library()` function: Because it is rarely necessary run or debug a single library loading task!\n\n```{r, eval = FALSE}\nlibrary(lobstr)\nlibrary(tidyverse)\n```\n\n:::\n\n:::{class=indent_wb}\n[&cir;]{class=bulls} Code blocks and comments (including section headers)^&dagger;^: This helps differentiate between code and comments.\n:::\n\n:::{class=indent_code_wb}\n\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\n# My atomic vector:\nc(1, 2)\n# My list:\n\nlist(1, 2)\n```\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\n# My atomic vector:\n\nc(1, 2)\n\n# My list:\n\nlist(1, 2)\n```\n\n:::\n\n\n:::{class=indent_wb}\n[&cir;]{class=bulls} Comments and section header comments^&dagger;^: This helps section headers stand out.\n:::\n\n:::{class=indent_code_wb}\n\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\n# My objects ----------------------------------------------\n# My atomic vector:\n\nc(1, 2)\n```\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\n# My objects ----------------------------------------------\n\n# My atomic vector:\n\nc(1, 2)\n```\n\n:::\n\n:::{class=indent_bb}\n*^&dagger;^ The tidyverse style guide gives no recommendations for vertical whitespace in code. I believe that vertical spacing rules defined here really helps differentiate between steps and generate much more readable code.*\n:::\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} **Horizontal whitespace**:\n:::\n\n:::{class=indent_wb}\n[&cir;]{class=bulls} Include a leading *and* trailing space for all assignment, arithmetic, and logical operators\n:::\n\n:::{class=indent_code_wb}\n\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\nmy_vector<-c(1, 2)\n\nmy_vector<- c(1, 2)\n\nmy_vector <-c(1, 2)\n\nmy_vector +1\n\nmy_vector+ 1\n```\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\nmy_vector <- c(1, 2) + 1\n\nmy_vector + 1\n```\n\n**Exception**: More than one space can be added before the `=` assignment operator if it improves alignment:\n\n```{r, eval = FALSE}\ntribble(\n  boy   = \"hello\",\n  howdy = \"world\" )\n```\n\n:::\n\n:::{class=indent_wb}\n[&cir;]{class=bulls} Include a (single) leading space for pipe operators ([|>]{class=mono}).\n:::\n\n:::{class=indent_code_wb}\n\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\nmy_vector|>\n  mean()\n```\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\nmy_vector |>\n  mean()\n```\n:::\n\n:::{class=indent_wb}\n[&cir;]{class=bulls} For multi-line code blocks, indent two spaces (a tab stop) relative to the parent object or process:\n:::\n\n:::{class=indent_code_wb}\n\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\nmy_vector |>\nmean()\n\nmean(\n    c(1, 1, 2),\nna.rm = TRUE)\n\nlist(\"guitar\",\n     \"bass\",\n     \"drums\")\n```\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\nmy_vector |>\n  mean()\n\nmean(\n  c(1, 1, 2),\n  na.rm = TRUE)\n\nlist(\n  \"guitar\",\n  \"bass\",\n  \"drums\")\n```\n:::\n\n:::{class=indent_wb}\n[&cir;]{class=bulls} Include a (single) trailing, but *not* a leading space for:\n:::\n\n:::{class=indent_sb}\n[&#9632;]{class=bulls} Commas: Spacing should be equivalent to the spacing used in regular English writing.\n:::\n\n:::{class=indent_code_sb}\n\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\nc(1,2)\n\nc(1 ,2)\n\nc(1 , 2)\n```\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\nc(1, 2)\n```\n\n**Exception**: More than one space can be added after a comma if it improves alignment:\n\n```{r, eval = FALSE}\ntribble(\n  ~ a,     ~ b,\n  \"hello\", \"world\")\n```\n\n:::\n\n:::{class=indent_sb}\n[&#9632;]{class=bulls} The formula operator (`~`)^&dagger;^\n:::\n\n:::{class=indent_code_sb}\n\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\nmy_tibble <- \n  tribble(\n    ~boy, ~howdy,\n    1, 2)\n```\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\nmy_tibble <- \n  tribble(\n    ~ boy, ~ howdy,\n    1, 2)\n```\n\n*^&dagger;^ The tidyverse style guide recommends that \"single-sided formulas when the right-hand side is a single identifier\" should not be followed by a trailing space. I have removed this requirement simply because examples of more complex right-hand identifiers will not be addressed until Module 5. No code formatting penalty will be enforced when the tidyverse style conditions are met.*\n\n:::\n\n:::{class=indent_sb}\n[&#9632;]{class=bulls} Hash tags and comment text (including section headers)\n:::\n\n:::{class=indent_code_sb}\n\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\n#My objects ----------------------------------------------\n\n# My atomic vector:\n\nc(1, 2)\n\n#My list:\n\nlist(1, 2)\n```\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\n# My objects ----------------------------------------------\n\n# My atomic vector:\n\nc(1, 2)\n\n# My list:\n\nlist(1, 2)\n```\n:::\n\n:::{class=indent_wb}\n[&cir;]{class=bulls} *Do not* include a leading or trailing space between:\n:::\n\n:::{class=indent_sb}\n[&#9632;]{class=bulls} Parentheses^&dagger;^ or square bracket operators and adjacent code\n:::\n\n:::{class=indent_code_sb}\n\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\nmy_vector <- c (1, 2)\n\nmy_vector <- c( 1, 2)\n\nmy_vector <- c(1, 2 )\n\nmy_vector [1]\n\nmy_vector[ 1]\n```\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\nmy_vector <- c(1, 2)\n\nmy_vector[1]\n```\n\n*^&dagger;^ The tidyverse style guide recommends including a space with before the parentheses when using the control flow operators `for ()` and `if ()`. These functions will not be addressed until Module 5, thus I have chosen to simplify this style guide by making the rule universal across course content.*\n:::\n\n:::{class=indent_sb}\n[&#9632;]{class=bulls} The `$` operator\n:::\n\n:::{class=indent_code_sb}\n\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\nmy_tibble $howdy\n\nmy_tibble$ howdy\n```\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\nmy_tibble$howdy\n```\n:::\n\n### Line breaks\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} No line of code should exceed 80 characters in width.\n:::\n\n:::{class=indent_code_bb}\n\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\nbrood_x_cicadas <- c(\"Magicicada cassini\", \"Magicicada septendecim\", \"Magicicada septendecula\")\n```\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\nbrood_x_cicadas <- \n  c(\"Magicicada cassini\", \"Magicicada septendecim\", \"Magicicada septendecula\")\n\n# Or (even better):\n\nbrood_x_cicadas <- \n  c(\"Magicicada cassini\",\n    \"Magicicada septendecim\", \n    \"Magicicada septendecula\")\n```\n\n**Exception**: Wide lines are sometimes unavoidable with long file paths or URLs:\n\n```{r, eval = FALSE}\npings <- \"https://github.com/kpaxton75/EcolEvol.Manuscript_Optimizing.Trilateration/blob/main/BeepData_Example.rds\"\n```\n\nIn such cases, just *do the best you can*:\n\n```{r, eval = FALSE}\npings <- \n  \"https://github.com/kpaxton75/EcolEvol.Manuscript_Optimizing.Trilateration/blob/main/BeepData_Example.rds\"\n```\n:::\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} Place no more than one assignment operator (`=`) or (`<-`) per line of code^&dagger;^.\n:::\n\n:::{class=indent_code_bb}\n\n[Bad:]{class=bad}\n\n```{r}\ngreetings <- rep(c(\"hello world\"), times = 2)\n```\n\n[Good:]{class=good}\n\n```{r}\ngreetings <- \n  rep(c(\"hello world\"), times = 2)\n```\n:::\n\n:::{class=indent_bb}\n[&#9679;]{class=bulls} Place `name <-` on its own line if the code block is more than one line.\n:::\n\n:::{class=indent_code_bb}\n\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\nmy_tibble <- tribble(\n  ~ boy, ~ howdy,\n  1, 2)\n```\n\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\nmy_tibble <-\n  tribble(\n    ~ boy, ~ howdy,\n    1, 2)\n```\n:::\n\n\n* If you provide four or more arguments to a named function, place each argument on its own line ^&dagger;^.\n\n:::{class=indent_code_bb}\n\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\nc(\"guitar\", \"bass\", \"drums\", \"vocals\")\n```\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\nc(\"guitar\",\n  \"bass\",\n  \"drums\",\n  \"vocals\")\n```\n\n**Exception, `c()` and `list()` with numeric values**: When using the `c()` or `list()` functions, you may include up to *five values* on the same line *if* the values being combined are one to three digit numeric values:\n\n```{r, eval = FALSE}\nc(3, 5, 8, 13, 21)\n```\n\n*^&dagger;^ The tidyverse style guide recommends a limit to the width of a line but does not recommend a criteria for achieving this.*\n:::\n\n* Always spell out `TRUE` and `FALSE`.\n\n:::{class=indent_code_bb}\n\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\nmean(\n  c(1, 2, NA),\n  na.rm = T)\n```\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\nmean(\n  c(1, 2, NA),\n  na.rm = TRUE)\n```\n:::\n\n* With **nested functions**, include no more than one *named* function per line (operators are okay)^&dagger;^.\n\n:::{class=indent_code_bb}\n\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\nmean(c(1, 2))\n```\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\nmean(\n  c(1, 2, NA),\n  na.rm = TRUE)\n```\n\n**Exception**: If the inner function is used to calculate a summary statistic of the data object (e.g., the functions [mean()]{class=mono}, [n()]{class=mono}, and [length()]{class=mono}):\n\n```{r, eval = FALSE}\nlist(1, mean(my_vector))\n\nsummarize(my_tibble, n = n())\n```\n:::\n\n* When chaining together functions with a **pipe operator** ([|>]{class=mono}), the chained functions should not occupy the same line of code^&dagger;^.\n\n:::{class=indent_code_bb}\n\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\nc(1, 2) |> mean()\n\nmy_tibble |> summarize(n = n())\n```\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\nc(1, 2) |> \n  mean()\n\nmy_tibble |> \n  summarize(n = n())\n```\n\n*^&dagger;^ The tidyverse style guide makes an exception with one-step pipes. I have simplified this to include all piped statements.*\n:::\n\n### Assignments/names\n\nPlace no more than one assignment operator (`=`) or (`<-`) per line of code^&dagger;^.\n\n:::{style=\"margin-left: 1.75em;\"}\n\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\nmy_instruments <- c(pete = \"guitar\")\n\nc(pete = \"guitar\", john = \"bass\")\n```\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\nmy_instruments <- \n  c(pete = \"guitar\")\n\nc(pete = \"guitar\", \n  john = \"bass\")\n```\n:::\n\nOnly use `=` when providing values assigned to the formals of a function -- for assigning to the global environment, use the `<-` assignment operator:\n\n[Bad:]{class=bad}\n\n:::{style=\"margin-left: 1.75em;\"}\n```{r, eval = FALSE}\nmy_tibble =\n  tribble(\n    ~ boy, ~ howdy,\n    1, 2)\n```\n:::\n\n[Good:]{class=good}\n\n:::{style=\"margin-left: 1.75em;\"}\n```{r, eval = FALSE}\nmy_tibble <-\n  tribble(\n    ~ boy, ~ howdy,\n    1, 2)\n```\n:::\n\nAssigned names should not include a `.`, should be in lowercase, and spaces between words should be separated by a `_` (i.e., *snake_case*).:\n\n:::{style=\"margin-left: 1.75em;\"}\n\n[Bad:]{class=bad}\n\n```{r, eval = FALSE}\nmy.phrases <-\n  tribble(\n    ~ boyHowdy, ~ HelloWorld,\n    1, 2)\n```\n\n[Good:]{class=good}\n\n```{r, eval = FALSE}\nmy_phrases <-\n  tribble(\n    ~ boy_howdy, ~ hello_world,\n    1, 2)\n```\n:::\n\n## Exploring these rules\n\nIn the video below, we will practice aligning a poorly formatted code with this style guide.\n\n**Before you begin**: \n\n1. Please open RStudio in your course project.\n2. Open the script file `code_formatting_practice.R`.\n3. Hit play!\n\n{{< video https://www.youtube.com/embed/PCPTI0Pw76w?si=4xqDF8XuaJ1pGVF2 >}}","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","self-contained":true,"output-file":"code_formatting.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["references.bib"],"editor":"visual","embed-resouces":true,"theme":["cosmo","custom_style.scss"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}